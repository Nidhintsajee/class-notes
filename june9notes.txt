Memory mangement in python
--------------------------
Biggest convienience offered by very high level languages, automatic memory management.

allocation is performed automatically whenever required.

eg: int *a; 
a=malloc(100);
a=malloc(200);

-> not reuse, not access, not free."garbage" is occured. memory leak occcured.

Python is doing automatically memory management, through a simple technique called refernce counting.

reference counting
-------------------
a=[1,2,3]
                                2000
                                ----------
                                1 2 3 | 1  -> ref-count
                                ----------
a
--------
2000
--------

When ref-count is 0, then block is "garbage". then python immedietly free that block of memory.

b=[10,a,10]

b -> [10,[1,2,3],10]
                                3000
                                --------------
                                10 2000 10 | 1
                                --------------
b
---------
3000
---------
a.append(a)

a -> [1,2,3,[1,2,3]]
                              2000
                              ---------------
                              1 2 3 2000 | 2
                              ---------------
a
---------------
2000
---------------

Cyclical data structure, self referntial data structure.

if a=X  ,then refcount increment 1  , X is any value.

                              2000
                              ---------------
                              1 2 3 2000 | 1
                              ---------------
                              
here "unreachable" occured. limitation of ref-counting based on auto memory management scheme.

more elaboarte "garbage collection mechanisms".

once in a while : unpredictable, "GC pause" -> GC- Garbage Collection

handreads of milli seconds. such delays may be unpredictable in certain situations.

real time :games,high frequency trading c++,java.
